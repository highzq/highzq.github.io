{"meta":{"title":"我滴小博客","subtitle":"随便写写","description":"","author":"Gao","url":"https://highzq.github.io"},"pages":[{"title":"标签","date":"2019-03-29T09:18:23.000Z","updated":"2019-03-29T10:30:24.064Z","comments":true,"path":"tags/index.html","permalink":"https://highzq.github.io/tags/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2019-03-29T09:17:36.000Z","updated":"2019-03-29T10:30:28.103Z","comments":true,"path":"categories/index.html","permalink":"https://highzq.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"问题整理","slug":"问题整理","date":"2020-07-13T08:00:14.000Z","updated":"2020-09-03T03:13:59.356Z","comments":true,"path":"2020/07/13/问题整理/","link":"","permalink":"https://highzq.github.io/2020/07/13/问题整理/","excerpt":"","text":"介绍一下js的数据类型有哪些,值是如何存储的一共有8种数据类型，7种基本数据类型String Number Boolean Null Undefined Symbol（es6 新增类型，表示第一无二的值） BigInt（es10 新增数据类型，目的是比Number数据类型支持的范围更大的整数值）Object（1种引用数据类型，里面包含 function、Array、Date等，JavaScript不支持任何创建自定义类型的机制，而所有值最终都将是上述 8 种数据类型之一）原始数据类型：直接存储在栈（stack）中，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。引用数据类型：同时存储在栈（stack）和堆（heap）中，占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。 &amp;&amp; 、 ||和!! 运算符分别能做什么&amp;&amp; 并且符，使用时两边的值结果都必须为true才返回true|| 或者符，两边的值结果有一个为true最终判断结果就位true!! 可以强制把右边的值转为布尔类型的值（两个感叹号正好就是单纯转换成布尔类型的方式） JS的数据类型的转换在 JS 中类型转换只有三种情况，分别是：- 转换为布尔值（调用Boolean()方法）- 转换为数字（调用Number()、parseInt()和parseFloat()方法）- 转换为字符串（调用.toString()或者String()方法）null和underfined没有.toString方法 JS中数据类型的判断（ typeof，instanceof，constructor，Object.prototype.toString.call() （1）typeoftypeof 对于原始类型来说，除了 null 都可以显示正确的类型console.log(typeof 2); // numberconsole.log(typeof true); // booleanconsole.log(typeof &apos;str&apos;); // stringconsole.log(typeof []); // object []数组的数据类型在 typeof 中被解释为 objectconsole.log(typeof function()&#123;&#125;); // functionconsole.log(typeof &#123;&#125;); // objectconsole.log(typeof undefined); // undefinedconsole.log(typeof null); // object null 的数据类型被 typeof 解释为 objecttypeof 对于对象来说，除了函数都会显示 object，所以说 typeof 并不能准确判断变量到底是什么类型,所以想判断一个对象的正确类型，这时候可以考虑使用 instanceof （2）instanceof//重点instanceof 可以精准判断引用数据类型（Array，Function，Object），而基本数据类型不能被instanceof精准判断instanceof 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 prototype。其意思就是判断对象是否是某一数据类型（如Array）的实例console.log(2 instanceof Number); // falseconsole.log(true instanceof Boolean); // false console.log(&apos;str&apos; instanceof String); // false console.log([] instanceof Array); // trueconsole.log(function()&#123;&#125; instanceof Function); // trueconsole.log(&#123;&#125; instanceof Object); // true // console.log(undefined instanceof Undefined); //报错// console.log(null instanceof Null); //报错复制代码可以看出直接的字面量值判断数据类型，instanceof可以精准判断引用数据类型（Array，Function，Object），而基本数据类型不能被instanceof精准判断。我们来看一下 instanceof 在MDN中的解释：instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。其意思就是判断对象是否是某一数据类型（如Array）的实例，请重点关注一下是判断一个对象是否是数据类型的实例。在这里字面量值，2， true ，&apos;str&apos;不是实例，所以判断值为false。 （3）constructorconsole.log((2).constructor === Number); // trueconsole.log((true).constructor === Boolean); // trueconsole.log((&apos;str&apos;).constructor === String); // trueconsole.log(([]).constructor === Array); // trueconsole.log((function() &#123;&#125;).constructor === Function); // trueconsole.log((&#123;&#125;).constructor === Object); // true这里有一个坑，如果我创建一个对象，更改它的原型，constructor就会变得不可靠了function Fn()&#123;&#125;; Fn.prototype=new Array(); var f=new Fn(); console.log(f.constructor===Fn); // falseconsole.log(f.constructor===Array); // true （4）Object.prototype.toString.call() 使用 Object 对象的原型方法 toString ，使用 call 进行狸猫换太子，借用Object的 toString 方法var a = Object.prototype.toString; console.log(a.call(2));console.log(a.call(true));console.log(a.call(&apos;str&apos;));console.log(a.call([]));console.log(a.call(function()&#123;&#125;));console.log(a.call(&#123;&#125;));console.log(a.call(undefined));console.log(a.call(null)); 介绍 JS 有哪些内置对象？全局的对象（ global objects ）或称标准内置对象，不要和 &quot;全局对象（global object）&quot; 混淆。这里说的全局的对象是说在全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。标准内置对象的分类（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。例如 Map、Set、WeakMap、WeakSet（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。例如 SIMD 等（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等（10）控制抽象对象例如 Promise、Generator 等（11）反射例如 Reflect、Proxy（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等（13）WebAssembly（14）其他例如 arguments undefined 与 undeclared 的区别？已在作用域中声明但还没有赋值的变量，是 undefined。相反，还没有在作用域中声明过的变量，是 undeclared 的。对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。但是我们可以使用 typeof 的安全防范机制来避免报错，因为对于 undeclared（或者 not defined ）变量，typeof 会返回 &quot;undefined&quot;。 null 和 undefined 的区别？首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。undefined 代表的含义是未定义，null 代表的含义是空对象（其实不是真的对象，请看下面的注意！）。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。/* 其实 null 不是对象，虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统， 为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。 虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。*/undefined 在 js 中不是一个保留字，这意味着我们可以使用 undefined 来作为一个变量名，这样的做法是非常危险的，它会影响我们对 undefined 值的判断。但是我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。当我们对两种类型使用 typeof 进行判断的时候，Null 类型化会返回 “object”，这是一个历史遗留的问题。当我们使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。 {}和[]的valueOf和toString的结果是什么？&#123;&#125; 的 valueOf 结果为 &#123;&#125; ，toString 的结果为 &quot;[object Object]&quot;[] 的 valueOf 结果为 [] ，toString 的结果为 &quot;&quot; Javascript 的作用域和作用域链？【作用域：】 作用域是定义变量的区域，它有一套访问变量的规则，这套规则来管理浏览器引擎如何在当前作用域以及嵌套的作用域中根据变量（标识符）进行变量查找。【作用域链：】 作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和函数。 javascript 创建对象的几种方式？（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么我们就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此我们可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此我们可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次我们都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此我们可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此我们可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。 JavaScript 继承的几种实现方式？（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。 寄生式组合继承的实现？PersonStudentfunction Person(name)&#123; this.name = name;&#125;Person.prototype.sayName = function()&#123; console.log(123);&#125;function Student(name, grade)&#123; Person.call(this,name); this.grade = grade;&#125;Student.prototype = Object.create(Person.prototype);Student.prototype.constructor = Student;Student.prototype.sayMyGrade = function() &#123; console.log(&quot;My grade is &quot; + this.grade + &quot;.&quot;); &#125; 谈谈你对this、call、apply和bind的理解总结:1. 在浏览器里，在全局范围内this 指向window对象；2. 在函数中，this永远指向最后调用他的那个对象；3. 构造函数中，this指向new出来的那个新的对象；4. call、apply、bind中的this被强绑定在指定的那个对象上；5. 箭头函数中this比较特殊,箭头函数this为父作用域的this，不是调用时的this.要知道前四种方式,都是调用时确定,也就是动态的,而箭头函数的this指向是静态的,声明的时候就确定了下来；6. apply、call、bind都是js给函数内置的一些API，调用他们可以为函数指定this的执行,同时也可以传参。区别:- call/apply改变了函数的this上下文后马上执行该函数- bind则是返回改变了上下文后的函数,不执行该函数 JavaScript 原型，原型链？ 有什么特点？prototype就是JS的原型，里面可以定义属性和方法当我们访问对象的一个属性时，对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又 会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就 是我们新建的对象为什么能够使用 toString() 等方法的原因。 js 获取原型的方法？p.protop.constructor.prototypeObject.getPrototypeOf(p) 什么是闭包，为什么要用它？闭包是指有权访问另一个函数作用域内变量的函数创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以 访问到当前函数的局部变量。闭包有两个常用的用途:- 闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。- 函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。function a()&#123; var n = 0; function add()&#123; n++; console.log(n); &#125; return add;&#125;var a1 = a(); //注意，函数名只是一个标识（指向函数的指针），而（）才是执行函数；a1(); //1a1(); //2 第二次调用n变量还在内存中其实闭包的本质就是作用域链的一个特殊的应用，只要了解了作用域链的创建过程，就能够理解闭包的实现原理。 什么是 DOM 和 BOM？DOM 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口。BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。 三种事件模型是什么？DOM0级模型： ，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实现，它可以在网页中直接定义监听函数，也可以通过 js属性来指定监听函数。这种方式是所有浏览器都兼容的。IE 事件模型： 在该事件模型中，一次事件共有两个过程，事件处理阶段，和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过 attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。DOM2 级事件模型： 在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是 addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。 事件委托是什么？事件委托 本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。 什么是事件传播?当事件发生在DOM元素上时，该事件并不完全发生在那个元素上。在“当事件发生在DOM元素上时，该事件并不完全发生在那个元素上。事件传播有三个阶段：1. 捕获阶段–事件从 window 开始，然后向下到每个元素，直到到达目标元素事件或event.target。2. 目标阶段–事件已达到目标元素。3. 冒泡阶段–事件从目标元素冒泡，然后上升到每个元素，直到到达 window。 什么是事件捕获？当事件发生在 DOM 元素上时，该事件并不完全发生在那个元素上。在捕获阶段，事件从window开始，一直到触发事件的元素。window----&gt; document----&gt; html----&gt; body ----&gt;目标元素html:&lt;div class=&quot;grandparent&quot;&gt; &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;child&quot;&gt;1&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;js:function addEvent(el, event, callback, isCapture = false) &#123; if (!el || !event || !callback || typeof callback !== &apos;function&apos;) return; if (typeof el === &apos;string&apos;) &#123; el = document.querySelector(el); &#125;; el.addEventListener(event, callback, isCapture);&#125;addEvent(document, &apos;DOMContentLoaded&apos;, () =&gt; &#123; const child = document.querySelector(&apos;.child&apos;); const parent = document.querySelector(&apos;.parent&apos;); const grandparent = document.querySelector(&apos;.grandparent&apos;); addEvent(child, &apos;click&apos;, function (e) &#123; console.log(&apos;child&apos;); &#125;); addEvent(parent, &apos;click&apos;, function (e) &#123; console.log(&apos;parent&apos;); &#125;); addEvent(grandparent, &apos;click&apos;, function (e) &#123; console.log(&apos;grandparent&apos;); &#125;); addEvent(document, &apos;click&apos;, function (e) &#123; console.log(&apos;document&apos;); &#125;); addEvent(&apos;html&apos;, &apos;click&apos;, function (e) &#123; console.log(&apos;html&apos;); &#125;) addEvent(window, &apos;click&apos;, function (e) &#123; console.log(&apos;window&apos;); &#125;)&#125;);addEventListener方法具有第三个可选参数useCapture，其默认值为false，事件将在冒泡阶段中发生，如果为true，则事件将在捕获阶段中发生。如果单击child元素，它将分别在控制台上打印window，document，html，grandparent和parent，这就是事件捕获。 什么是事件冒泡？事件冒泡刚好与事件捕获相反，当前元素----&gt;body ----&gt; html----&gt;document ----&gt;window。当事件发生在DOM元素上时，该事件并不完全发生在那个元素上。在冒泡阶段，事件冒泡，或者事件发生在它的父代，祖父母，祖父母的父代，直到到达window为止。假设有如下的 HTML 结构：&lt;div class=&quot;grandparent&quot;&gt; &lt;div class=&quot;parent&quot;&gt; &lt;div class=&quot;child&quot;&gt;1&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;对应的JS代码：function addEvent(el, event, callback, isCapture = false) &#123; if (!el || !event || !callback || typeof callback !== &apos;function&apos;) return; if (typeof el === &apos;string&apos;) &#123; el = document.querySelector(el); &#125;; el.addEventListener(event, callback, isCapture);&#125;addEvent(document, &apos;DOMContentLoaded&apos;, () =&gt; &#123; const child = document.querySelector(&apos;.child&apos;); const parent = document.querySelector(&apos;.parent&apos;); const grandparent = document.querySelector(&apos;.grandparent&apos;); addEvent(child, &apos;click&apos;, function (e) &#123; console.log(&apos;child&apos;); &#125;); addEvent(parent, &apos;click&apos;, function (e) &#123; console.log(&apos;parent&apos;); &#125;); addEvent(grandparent, &apos;click&apos;, function (e) &#123; console.log(&apos;grandparent&apos;); &#125;); addEvent(document, &apos;click&apos;, function (e) &#123; console.log(&apos;document&apos;); &#125;); addEvent(&apos;html&apos;, &apos;click&apos;, function (e) &#123; console.log(&apos;html&apos;); &#125;) addEvent(window, &apos;click&apos;, function (e) &#123; console.log(&apos;window&apos;); &#125;)&#125;);addEventListener方法具有第三个可选参数useCapture，其默认值为false，事件将在冒泡阶段中发生，如果为true，则事件将在捕获阶段中发生。如果单击child元素，它将分别在控制台上打印child，parent，grandparent，html，document和window，这就是事件冒泡。 DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？（1）创建新节点createDocumentFragment() //创建一个DOM片段createElement() //创建一个具体的元素createTextNode() //创建一个文本节点 （2）添加、移除、替换、插入appendChild(node)removeChild(node)replaceChild(new,old)insertBefore(new,old) （3）查找getElementById();getElementsByName();getElementsByTagName();getElementsByClassName();querySelector();querySelectorAll(); （4）属性操作getAttribute(key);setAttribute(key, value);hasAttribute(key);removeAttribute(key); js数组和对象有哪些原生方法,列举一下 常用的正则表达式Ajax 是什么? 如何创建一个 Ajax？我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。创建步骤：//1：创建Ajax对象var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;); //兼容IE6及以下版本//2：配置 Ajax请求地址xhr.open(&apos;get&apos;,&apos;index.xml&apos;,true);//3：发送请求xhr.send(null); //严谨写法//4:监听请求，接受响应xhr.onreadysatechange = function()&#123; if(xhr.readySates == 4 &amp;&amp; xhr.status == 200 || xhr.status == 304)&#123; console.log(xhr.responsetXML); &#125;&#125; promise封装实现// promise 封装实现：function getJSON(url) &#123; // 创建一个 promise 对象 let promise = new Promise(function(resolve, reject) &#123; let xhr = new XMLHttpRequest(); // 新建一个 http 请求 xhr.open(&quot;GET&quot;, url, true); // 设置状态的监听函数 xhr.onreadystatechange = function() &#123; if (this.readyState !== 4) return; // 当请求成功或失败时，改变 promise 的状态 if (this.status === 200) &#123; resolve(this.response); &#125; else &#123; reject(new Error(this.statusText)); &#125; &#125;; // 设置错误监听函数 xhr.onerror = function() &#123; reject(new Error(this.statusText)); &#125;; // 设置响应的数据类型 xhr.responseType = &quot;json&quot;; // 设置请求头信息 xhr.setRequestHeader(&quot;Accept&quot;, &quot;application/json&quot;); // 发送 http 请求 xhr.send(null); &#125;); return promise;&#125; js 延迟加载的方式有哪些？js 的加载、解析和执行会阻塞页面的渲染过程，因此我们希望 js 脚本能够尽可能的延迟加载，提高页面的渲染速度。我了解到的几种方式是：将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。给 js 脚本添加 defer属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。给 js 脚本添加 async属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。动态创建 DOM 标签的方式，我们可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。 谈谈你对模块化开发的理解？我对模块的理解是，一个模块是实现一个特定功能的一组方法。在最开始的时候，js 只实现一些简单的功能，所以并没有模块的概念，但随着程序越来越复杂，代码的模块化开发变得越来越重要。由于函数具有独立作用域的特点，最原始的写法是使用函数来作为模块，几个函数作为一个模块，但是这种方式容易造成全局变量的污染，并且模块间没有联系。后面提出了对象写法，通过将函数作为一个对象的方法来实现，这样解决了直接使用函数作为模块的一些缺点，但是这种办法会暴露所有的所有的模块成员，外部代码可以修改内部属性的值。现在最常用的是立即执行函数的写法，通过利用闭包来实现模块私有作用域的建立，同时不会对全局作用域造成污染。 js 的几种模块规范？js 中现在比较成熟的有四种模块加载方案：第一种是 CommonJS 方案，它通过 require 来引入模块，通过 module.exports 定义模块的输出接口。这种模块加载方案是服务器端的解决方案，它是以同步的方式来引入模块的，因为在服务端文件都存储在本地磁盘，所以读取非常快，所以以同步的方式加载没有问题。但如果是在浏览器端，由于模块的加载是使用网络请求，因此使用异步加载的方式更加合适。第二种是 AMD 方案，这种方案采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行，所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范。第三种是 CMD 方案，这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范。它和require.js的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同。第四种方案是 ES6 提出的方案，使用 import 和 export 的形式来导入导出模块。 AMD和CMD 规范的区别？它们之间的主要区别有两个方面。 第一个方面是在模块定义时对依赖的处理不同。AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块。而 CMD 推崇就近依赖，只有在用到某个模块的时候再去 require。 第二个方面是对依赖模块的执行时机处理不同。首先 AMD 和 CMD 对于模块的加载方式都是异步加载，不过它们的区别在于 模块的执行时机，AMD 在依赖模块加载完成后就直接执行依赖模块，依赖模块的执行顺序和我们书写的顺序不一定一致。而 CMD 在依赖模块加载完成后并不执行，只是下载而已，等到所有的依赖模块都加载好后，进入回调函数逻辑，遇到 require 语句 的时候才执行对应的模块，这样模块的执行顺序就和我们书写的顺序保持一致了。 // CMDdefine(function(require, exports, module) &#123; var a = require(&quot;./a&quot;); a.doSomething(); // 此处略去 100 行 var b = require(&quot;./b&quot;); // 依赖可以就近书写 b.doSomething(); // ...&#125;);// AMD 默认推荐define([&quot;./a&quot;, &quot;./b&quot;], function(a, b) &#123; // 依赖必须一开始就写好 a.doSomething(); // 此处略去 100 行 b.doSomething(); // ...&#125;); ES6 模块与 CommonJS 模块、AMD、CMD 的差异。 1.CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。CommonJS 模块输出的是值的，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。 2.CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。CommonJS 模块就是对象，即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。 requireJS的核心原理是什么？require.js 的核心原理是通过动态创建 script 脚本来异步引入模块，然后对每个脚本的 load 事件进行监听，如果每个脚本都加载完成了，再调用回调函数。 谈谈JS的运行机制 js单线程JavaScript语言的一大特点就是单线程，即同一时间只能做一件事情。 JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。 js事件循环js代码执行过程中会有很多任务，这些任务总的分成两类： 同步任务 异步任务当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。，我们用导图来说明： 回答： 首先js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。 在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务 当同步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。 任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。 当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。 arguments 的对象是什么？arguments对象是函数中传递的参数值的集合。它是一个类似数组的对象，因为它有一个length属性，我们可以使用数组索引表示法arguments[1]来访问单个值，但它没有数组中的内置方法，如：forEach、reduce、filter和map。我们可以使用Array.prototype.slice将arguments对象转换成一个数组。function one() &#123; return Array.prototype.slice.call(arguments);&#125; 注意:箭头函数中没有arguments对象。function one() &#123; return arguments;&#125;const two = function () &#123; return arguments;&#125;const three = function three() &#123; return arguments;&#125;const four = () =&gt; arguments;four(); // Throws an error - arguments is not defined 为什么在调用这个函数时，代码中的b会变成一个全局变量?function myFunc() &#123; let a = b = 0;&#125;myFunc(); 原因是赋值运算符是从右到左的求值的。这意味着当多个赋值运算符出现在一个表达式中时，它们是从右向左求值的。所以上面代码变成了这样：function myFunc() &#123; let a = (b = 0);&#125;myFunc(); 首先，表达式b = 0求值，在本例中b没有声明。因此，JS引擎在这个函数外创建了一个全局变量b，之后表达式b = 0的返回值为0，并赋给新的局部变量a。 我们可以通过在赋值之前先声明变量来解决这个问题。function myFunc() &#123; let a,b; a = b = 0;&#125;myFunc(); 简单介绍一下V8引擎的垃圾回收机制v8 的垃圾回收机制基于分代回收机制，这个机制又基于世代假说，这个假说有两个特点，一是新生的对象容易早死，另一个是不死的对象会活得更久。基于这个假说，v8 引擎将内存分为了新生代和老生代。新创建的对象或者只经历过一次的垃圾回收的对象被称为新生代。经历过多次垃圾回收的对象被称为老生代。新生代被分为 From 和 To 两个空间，To 一般是闲置的。当 From 空间满了的时候会执行 Scavenge 算法进行垃圾回收。当我们执行垃圾回收算法的时候应用逻辑将会停止，等垃圾回收结束后再继续执行。这个算法分为三步：（1）首先检查 From 空间的存活对象，如果对象存活则判断对象是否满足晋升到老生代的条件，如果满足条件则晋升到老生代。如果不满足条件则移动 To 空间。（2）如果对象不存活，则释放对象的空间。（3）最后将 From 空间和 To 空间角色进行交换。新生代对象晋升到老生代有两个条件：（1）第一个是判断是对象否已经经过一次 Scavenge 回收。若经历过，则将对象从 From 空间复制到老生代中；若没有经历，则复制到 To 空间。（2）第二个是 To 空间的内存使用占比是否超过限制。当对象从 From 空间复制到 To 空间时，若 To 空间使用超过 25%，则对象直接晋升到老生代中。设置 25% 的原因主要是因为算法结束后，两个空间结束后会交换位置，如果 To 空间的内存太小，会影响后续的内存分配。老生代采用了标记清除法和标记压缩法。标记清除法首先会对内存中存活的对象进行标记，标记结束后清除掉那些没有标记的对象。由于标记清除后会造成很多的内存碎片，不便于后面的内存分配。所以了解决内存碎片的问题引入了标记压缩法。由于在进行垃圾回收的时候会暂停应用的逻辑，对于新生代方法由于内存小，每次停顿的时间不会太长，但对于老生代来说每次垃圾回收的时间长，停顿会造成很大的影响。 为了解决这个问题 V8 引入了增量标记的方法，将一次停顿进行的过程分为了多步，每次执行完一小步就让运行逻辑执行一会，就这样交替运行。 哪些操作会造成内存泄漏？ 1.意外的全局变量 2.被遗忘的计时器或回调函数 3.脱离 DOM 的引用 4.闭包 第一种情况是我们由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。 第二种情况是我们设置了setInterval定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。 第三种情况是我们获取一个DOM元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回收。 第四种情况是不合理的使用闭包，从而导致某些变量一直被留在内存当中。 ECMAScript 是什么？ECMAScript 是编写脚本语言的标准，这意味着JavaScript遵循ECMAScript标准中的规范变化，因为它是JavaScript的蓝图。ECMAScript 和 Javascript，本质上都跟一门语言有关，一个是语言本身的名字，一个是语言的约束条件只不过发明JavaScript的那个人（Netscape公司），把东西交给了ECMA（European Computer Manufacturers Association），这个人规定一下他的标准，因为当时有java语言了，又想强调这个东西是让ECMA这个人定的规则，所以就这样一个神奇的东西诞生了，这个东西的名称就叫做ECMAScript。javaScript = ECMAScript + DOM + BOM（自认为是一种广义的JavaScript）ECMAScript说什么JavaScript就得做什么！JavaScript（狭义的JavaScript）做什么都要问问ECMAScript我能不能这样干！如果不能我就错了！能我就是对的！——突然感觉JavaScript好没有尊严，为啥要搞个人出来约束自己，那个人被创造出来也好委屈，自己被创造出来完全是因为要约束JavaScript。 ECMAScript 2015（ES6）有哪些新特性？ 块作用域 类 箭头函数 模板字符串 加强的对象字面 对象解构 Promise 模块 Symbol 代理（proxy）Set 函数默认参数 rest 和展开 var,let和const的区别是什么？var声明的变量会挂载在window上，而let和const声明的变量不会：var a = 100;console.log(a,window.a); // 100 100let b = 10;console.log(b,window.b); // 10 undefinedconst c = 1;console.log(c,window.c); // 1 undefined var声明变量存在变量提升，let和const不存在变量提升:console.log(a); // undefined ===&gt; a已声明还没赋值，默认得到undefined值var a = 100;console.log(b); // 报错：b is not defined ===&gt; 找不到b这个变量let b = 10;console.log(c); // 报错：c is not defined ===&gt; 找不到c这个变量const c = 10; let和const声明形成块作用域if(1)&#123; var a = 100; let b = 10;&#125;console.log(a); // 100console.log(b) // 报错：b is not defined ===&gt; 找不到b这个变量-------------------------------------------------------------if(1)&#123; var a = 100; const c = 1;&#125;console.log(a); // 100console.log(c) // 报错：c is not defined ===&gt; 找不到c这个变量 同一作用域下let和const不能声明同名变量，而var可以var a = 100;console.log(a); // 100var a = 10;console.log(a); // 10-------------------------------------let a = 100;let a = 10;// 控制台报错：Identifier &apos;a&apos; has already been declared ===&gt; 标识符a已经被声明了。 暂存死区var a = 100;if(1)&#123; a = 10; //在当前块作用域中存在a使用let/const声明的情况下，给a赋值10时，只会在当前作用域找变量a， // 而这时，还未到声明时候，所以控制台Error:a is not defined let a = 1;&#125; const/** &amp;emsp;&amp;emsp;1、一旦声明必须赋值,不能使用null占位。** &amp;emsp;&amp;emsp;2、声明后不能再修改** &amp;emsp;&amp;emsp;3、如果声明的是复合类型数据，可以修改其属性** */const a = 100; const list = [];list[0] = 10;console.log(list);&amp;emsp;&amp;emsp;// [10]const obj = &#123;a:100&#125;;obj.name = &apos;apple&apos;;obj.a = 10000;console.log(obj);&amp;emsp;&amp;emsp;// &#123;a:10000,name:&apos;apple&apos;&#125; 什么是箭头函数？箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。//ES5 Versionvar getCurrentDate = function ()&#123; return new Date();&#125;//ES6 Versionconst getCurrentDate = () =&gt; new Date(); 在本例中，ES5 版本中有function(){}声明和return关键字，这两个关键字分别是创建函数和返回值所需要的。在箭头函数版本中，我们只需要()括号，不需要 return 语句，因为如果我们只有一个表达式或值需要返回，箭头函数就会有一个隐式的返回。//ES5 Versionfunction greet(name) &#123; return &apos;Hello &apos; + name + &apos;!&apos;;&#125;//ES6 Versionconst greet = (name) =&gt; `Hello $&#123;name&#125;`;const greet2 = name =&gt; `Hello $&#123;name&#125;`; 我们还可以在箭头函数中使用与函数表达式和函数声明相同的参数。如果我们在一个箭头函数中有一个参数，则可以省略括号。const getArgs = () =&gt; argumentsconst getArgs2 = (...rest) =&gt; rest 箭头函数不能访问arguments对象。所以调用第一个getArgs函数会抛出一个错误。相反，我们可以使用rest参数来获得在箭头函数中传递的所有参数。const data = &#123; result: 0, nums: [1, 2, 3, 4, 5], computeResult() &#123; // 这里的“this”指的是“data”对象 const addAll = () =&gt; &#123; return this.nums.reduce((total, cur) =&gt; total + cur, 0) &#125;; this.result = addAll(); &#125;&#125;; 箭头函数没有自己的this值。它捕获词法作用域函数的this值，在此示例中，addAll函数将复制computeResult 方法中的this值，如果我们在全局作用域声明箭头函数，则this值为 window 对象。 什么是类？类(class)是在 JS 中编写构造函数的新方法。它是使用构造函数的语法糖，在底层中使用仍然是原型和基于原型的继承。 什么是模板字符串？模板字符串是在 JS 中创建字符串的一种新方法。我们可以通过使用反引号使模板字符串化。//ES5 Versionvar greet = &apos;Hi I\\&apos;m Mark&apos;;//ES6 Versionlet greet = `Hi I&apos;m Mark`; 在 ES5 中我们需要使用一些转义字符来达到多行的效果，在模板字符串不需要这么麻烦：//ES5 Versionvar lastWords = &apos;\\n&apos; + &apos; I \\n&apos; + &apos; Am \\n&apos; + &apos;Iron Man \\n&apos;;//ES6 Versionlet lastWords = ` I Am Iron Man `; 在ES5版本中，我们需要添加\\n以在字符串中添加新行。在模板字符串中，我们不需要这样做。//ES5 Versionfunction greet(name) &#123; return &apos;Hello &apos; + name + &apos;!&apos;;&#125;//ES6 Versionfunction greet(name) &#123; return `Hello $&#123;name&#125; !`;&#125; 在 ES5 版本中，如果需要在字符串中添加表达式或值，则需要使用+运算符。在模板字符串s中，我们可以使用${expr}嵌入一个表达式，这使其比 ES5 版本更整洁。 什么是对象解构？对象析构是从对象或数组中获取或提取值的一种新的、更简洁的方法。假设有如下的对象：const employee = &#123; firstName: &quot;Marko&quot;, lastName: &quot;Polo&quot;, position: &quot;Software Developer&quot;, yearHired: 2017&#125;; 从对象获取属性，早期方法是创建一个与对象属性同名的变量。这种方法很麻烦，因为我们要为每个属性创建一个新变量。假设我们有一个大对象，它有很多属性和方法，用这种方法提取属性会很麻烦。var firstName = employee.firstName;var lastName = employee.lastName;var position = employee.position;var yearHired = employee.yearHired; 使用解构方式语法就变得简洁多了：&#123; firstName, lastName, position, yearHired &#125; = employee; 我们还可以为属性取别名：let &#123; firstName: fName, lastName: lName, position, yearHired &#125; = employee; 当然如果属性值为 undefined 时，我们还可以指定默认值，但是属性为null时指定的默认值则不生效：let &#123; firstName = &quot;Mark&quot;, lastName: lName, position, yearHired &#125; = employee; 什么是Set对象，它是如何工作的？Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。 我们可以使用Set构造函数创建Set实例。const set1 = new Set();const set2 = new Set([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;d&quot;,&quot;e&quot;]); 我们可以使用add方法向Set实例中添加一个新值，因为add方法返回Set对象，所以我们可以以链式的方式再次使用add。如果一个值已经存在于Set对象中，那么它将不再被添加。set2.add(&quot;f&quot;);set2.add(&quot;g&quot;).add(&quot;h&quot;).add(&quot;i&quot;).add(&quot;j&quot;).add(&quot;k&quot;).add(&quot;k&quot;);// 后一个“k”不会被添加到set对象中，因为它已经存在了 我们可以使用has方法检查Set实例中是否存在特定的值。set2.has(&quot;a&quot;) // trueset2.has(&quot;z&quot;) // true 我们可以使用size属性获得Set实例的长度。set2.size // returns 10 可以使用clear方法删除 Set 中的数据。set2.clear(); 我们可以使用Set对象来删除数组中重复的元素。const numbers = [1, 2, 3, 4, 5, 6, 6, 7, 8, 8, 5];const uniqueNums = [...new Set(numbers)]; // [1,2,3,4,5,6,7,8] 另外还有WeakSet， 与 Set 类似，也是不重复的值的集合。但是 WeakSet 的成员只能是对象，而不能是其他类型的值。WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet对该对象的引用。 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。 WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。 什么是Proxy？Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”，即对编程语言进行编程。 Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。 写一个通用的事件侦听器函数？const EventUtils = &#123; // 视能力分别使用dom0||dom2||IE方式 来绑定事件 // 添加事件 addEvent: function(element, type, handler) &#123; if (element.addEventListener) &#123; element.addEventListener(type, handler, false); &#125; else if (element.attachEvent) &#123; element.attachEvent(&quot;on&quot; + type, handler); &#125; else &#123; element[&quot;on&quot; + type] = handler; &#125; &#125;, // 移除事件 removeEvent: function(element, type, handler) &#123; if (element.removeEventListener) &#123; element.removeEventListener(type, handler, false); &#125; else if (element.detachEvent) &#123; element.detachEvent(&quot;on&quot; + type, handler); &#125; else &#123; element[&quot;on&quot; + type] = null; &#125; &#125;, // 获取事件目标 getTarget: function(event) &#123; return event.target || event.srcElement; &#125;, // 获取 event 对象的引用，取到事件的所有信息，确保随时能使用 event getEvent: function(event) &#123; return event || window.event; &#125;, // 阻止事件（主要是事件冒泡，因为 IE 不支持事件捕获） stopPropagation: function(event) &#123; if (event.stopPropagation) &#123; event.stopPropagation(); &#125; else &#123; event.cancelBubble = true; &#125; &#125;, // 取消事件的默认行为 preventDefault: function(event) &#123; if (event.preventDefault) &#123; event.preventDefault(); &#125; else &#123; event.returnValue = false; &#125; &#125;&#125;; 什么是函数式编程? JavaScript的哪些特性使其成为函数式语言的候选语言？函数式编程（通常缩写为FP）是通过编写纯函数，避免共享状态、可变数据、副作用 来构建软件的过程。数式编程是声明式 的而不是命令式 的，应用程序的状态是通过纯函数流动的。与面向对象编程形成对比，面向对象中应用程序的状态通常与对象中的方法共享和共处。函数式编程是一种编程范式 ，这意味着它是一种基于一些基本的定义原则（如上所列）思考软件构建的方式。当然，编程范式的其他示例也包括面向对象编程和过程编程。函数式的代码往往比命令式或面向对象的代码更简洁，更可预测，更容易测试 - 但如果不熟悉它以及与之相关的常见模式，函数式的代码也可能看起来更密集杂乱，并且 相关文献对新人来说是不好理解的。 什么是高阶函数？高阶函数只是将函数作为参数或返回值的函数。function higherOrderFunction(param,callback)&#123; return callback(param);&#125; 为什么函数被称为一等公民？在JavaScript中，函数不仅拥有一切传统函数的使用方式（声明和调用），而且可以做到像简单值一样:赋值（var func = function()&#123;&#125;）、传参(function func(x,callback)&#123;callback();&#125;)、返回(function()&#123;return function()&#123;&#125;&#125;)，这样的函数也称之为第一级函数（First-class Function）。不仅如此，JavaScript中的函数还充当了类的构造函数的作用，同时又是一个Function类的实例(instance)。这样的多重身份让JavaScript的函数变得非常重要。 手动实现Array.prototype.map 方法map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。function map(arr, mapCallback) &#123; // 首先，检查传递的参数是否正确。 if (!Array.isArray(arr) || !arr.length || typeof mapCallback !== &apos;function&apos;) &#123; return []; &#125; else &#123; let result = []; // 每次调用此函数时，我们都会创建一个 result 数组 // 因为我们不想改变原始数组。 for (let i = 0, len = arr.length; i &lt; len; i++) &#123; result.push(mapCallback(arr[i], i, arr)); // 将 mapCallback 返回的结果 push 到 result 数组中 &#125; return result; &#125;&#125; 手动实现Array.prototype.filter方法filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。function filter(arr, filterCallback) &#123; // 首先，检查传递的参数是否正确。 if (!Array.isArray(arr) || !arr.length || typeof filterCallback !== &apos;function&apos;) &#123; return []; &#125; else &#123; let result = []; // 每次调用此函数时，我们都会创建一个 result 数组 // 因为我们不想改变原始数组。 for (let i = 0, len = arr.length; i &lt; len; i++) &#123; // 检查 filterCallback 的返回值是否是真值 if (filterCallback(arr[i], i, arr)) &#123; // 如果条件为真，则将数组元素 push 到 result 中 result.push(arr[i]); &#125; &#125; return result; // return the result array &#125;&#125; 手动实现Array.prototype.reduce方法reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。function reduce(arr, reduceCallback, initialValue) &#123; // 首先，检查传递的参数是否正确。 if (!Array.isArray(arr) || !arr.length || typeof reduceCallback !== &apos;function&apos;) &#123; return []; &#125; else &#123; // 如果没有将initialValue传递给该函数，我们将使用第一个数组项作为initialValue let hasInitialValue = initialValue !== undefined; let value = hasInitialValue ? initialValue : arr[0]; 、 // 如果有传递 initialValue，则索引从 1 开始，否则从 0 开始 for (let i = hasInitialValue ? 1 : 0, len = arr.length; i &lt; len; i++) &#123; value = reduceCallback(value, arr[i], i, arr); &#125; return value; &#125;&#125; js的深浅拷贝 JavaScript的深浅拷贝一直是个难点，如果现在面试官让我写一个深拷贝，我可能也只是能写出个基础版的。所以在写这条之前我拜读了收藏夹里各路大佬写的博文。具体可以看下面我贴的链接，这里只做简单的总结。 浅拷贝： 创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。 深拷贝： 将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。浅拷贝的实现方式： Object.assign() 方法： 用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。 Array.prototype.slice()：slice() 方法返回一个新的数组对象，这一对象是一个由 begin和end（不包括end）决定的原数组的浅拷贝。原始数组不会被改变。 拓展运算符…：let a = &#123; name: &quot;Jake&quot;, flag: &#123; title: &quot;better day by day&quot;, time: &quot;2020-05-31&quot; &#125;&#125;let b = &#123;...a&#125;; 深拷贝的实现方式： 乞丐版： JSON.parse(JSON.stringify(object))，缺点诸多（会忽略undefined、symbol、函数；不能解决循环引用；不能处理正则、new Date()） 基础版（面试够用）： 浅拷贝+递归 （只考虑了普通的 object和 array两种数据类型）function cloneDeep(target,map = new WeakMap()) &#123; if(typeOf taret ===&apos;object&apos;)&#123; let cloneTarget = Array.isArray(target) ? [] : &#123;&#125;; if(map.get(target)) &#123; return target; &#125; map.set(target, cloneTarget); for(const key in target)&#123; cloneTarget[key] = cloneDeep(target[key], map); &#125; return cloneTarget &#125;else&#123; return target &#125; &#125; 终极版：const mapTag = &apos;[object Map]&apos;;const setTag = &apos;[object Set]&apos;;const arrayTag = &apos;[object Array]&apos;;const objectTag = &apos;[object Object]&apos;;const argsTag = &apos;[object Arguments]&apos;;const boolTag = &apos;[object Boolean]&apos;;const dateTag = &apos;[object Date]&apos;;const numberTag = &apos;[object Number]&apos;;const stringTag = &apos;[object String]&apos;;const symbolTag = &apos;[object Symbol]&apos;;const errorTag = &apos;[object Error]&apos;;const regexpTag = &apos;[object RegExp]&apos;;const funcTag = &apos;[object Function]&apos;;const deepTag = [mapTag, setTag, arrayTag, objectTag, argsTag];function forEach(array, iteratee) &#123; let index = -1; const length = array.length; while (++index &lt; length) &#123; iteratee(array[index], index); &#125; return array;&#125;function isObject(target) &#123; const type = typeof target; return target !== null &amp;&amp; (type === &apos;object&apos; || type === &apos;function&apos;);&#125;function getType(target) &#123; return Object.prototype.toString.call(target);&#125;function getInit(target) &#123; const Ctor = target.constructor; return new Ctor();&#125;function cloneSymbol(targe) &#123; return Object(Symbol.prototype.valueOf.call(targe));&#125;function cloneReg(targe) &#123; const reFlags = /\\w*$/; const result = new targe.constructor(targe.source, reFlags.exec(targe)); result.lastIndex = targe.lastIndex; return result;&#125;function cloneFunction(func) &#123; const bodyReg = /(?&lt;=&#123;)(.|\\n)+(?=&#125;)/m; const paramReg = /(?&lt;=\\().+(?=\\)\\s+&#123;)/; const funcString = func.toString(); if (func.prototype) &#123; const param = paramReg.exec(funcString); const body = bodyReg.exec(funcString); if (body) &#123; if (param) &#123; const paramArr = param[0].split(&apos;,&apos;); return new Function(...paramArr, body[0]); &#125; else &#123; return new Function(body[0]); &#125; &#125; else &#123; return null; &#125; &#125; else &#123; return eval(funcString); &#125;&#125;function cloneOtherType(targe, type) &#123; const Ctor = targe.constructor; switch (type) &#123; case boolTag: case numberTag: case stringTag: case errorTag: case dateTag: return new Ctor(targe); case regexpTag: return cloneReg(targe); case symbolTag: return cloneSymbol(targe); case funcTag: return cloneFunction(targe); default: return null; &#125;&#125;function clone(target, map = new WeakMap()) &#123; // 克隆原始类型 if (!isObject(target)) &#123; return target; &#125; // 初始化 const type = getType(target); let cloneTarget; if (deepTag.includes(type)) &#123; cloneTarget = getInit(target, type); &#125; else &#123; return cloneOtherType(target, type); &#125; // 防止循环引用 if (map.get(target)) &#123; return map.get(target); &#125; map.set(target, cloneTarget); // 克隆set if (type === setTag) &#123; target.forEach(value =&gt; &#123; cloneTarget.add(clone(value, map)); &#125;); return cloneTarget; &#125; // 克隆map if (type === mapTag) &#123; target.forEach((value, key) =&gt; &#123; cloneTarget.set(key, clone(value, map)); &#125;); return cloneTarget; &#125; // 克隆对象和数组 const keys = type === arrayTag ? undefined : Object.keys(target); forEach(keys || target, (value, key) =&gt; &#123; if (keys) &#123; key = value; &#125; cloneTarget[key] = clone(target[key], map); &#125;); return cloneTarget;&#125;module.exports = &#123; clone&#125;; 手写call、apply及bind函数call 函数的实现步骤： 1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。 2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。 3.处理传入的参数，截取第一个参数后的所有参数。 4.将函数作为上下文对象的一个属性。 5.使用上下文对象来调用这个方法，并保存返回结果。 6.删除刚才新增的属性。 7.返回结果。// call函数实现Function.prototype.myCall = function(context) &#123; // 判断调用对象 if (typeof this !== &quot;function&quot;) &#123; console.error(&quot;type error&quot;); &#125; // 获取参数 let args = [...arguments].slice(1), result = null; // 判断 context 是否传入，如果未传入则设置为 window context = context || window; // 将调用函数设为对象的方法 context.fn = this; // 调用函数 result = context.fn(...args); // 将属性删除 delete context.fn; return result;&#125;; apply 函数的实现步骤： 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。 判断传入上下文对象是否存在，如果不存在，则设置为 window 。 将函数作为上下文对象的一个属性。 判断参数值是否传入 使用上下文对象来调用这个方法，并保存返回结果。 删除刚才新增的属性 返回结果// apply 函数实现Function.prototype.myApply = function(context) &#123; // 判断调用对象是否为函数 if (typeof this !== &quot;function&quot;) &#123; throw new TypeError(&quot;Error&quot;); &#125; let result = null; // 判断 context 是否存在，如果未传入则为 window context = context || window; // 将函数设为对象的方法 context.fn = this; // 调用方法 if (arguments[1]) &#123; result = context.fn(...arguments[1]); &#125; else &#123; result = context.fn(); &#125; // 将属性删除 delete context.fn; return result;&#125;; bind 函数的实现步骤： 1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。 2.保存当前函数的引用，获取其余传入参数值。 3.创建一个函数返回 4.函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。// bind 函数实现Function.prototype.myBind = function(context) &#123; // 判断调用对象是否为函数 if (typeof this !== &quot;function&quot;) &#123; throw new TypeError(&quot;Error&quot;); &#125; // 获取参数 var args = [...arguments].slice(1), fn = this; return function Fn() &#123; // 根据调用方式，传入不同绑定值 return fn.apply( this instanceof Fn ? this : context, args.concat(...arguments) ); &#125;;&#125;; 函数柯里化的实现// 函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。function curry(fn, args) &#123; // 获取函数需要的参数长度 let length = fn.length; args = args || []; return function() &#123; let subArgs = args.slice(0); // 拼接得到现有的所有参数 for (let i = 0; i &lt; arguments.length; i++) &#123; subArgs.push(arguments[i]); &#125; // 判断参数的长度是否已经满足函数所需参数的长度 if (subArgs.length &gt;= length) &#123; // 如果满足，执行函数 return fn.apply(this, subArgs); &#125; else &#123; // 如果不满足，递归返回科里化的函数，等待参数的传入 return curry.call(this, fn, subArgs); &#125; &#125;;&#125;// es6 实现function curry(fn, ...args) &#123; return fn.length &lt;= args.length ? fn(...args) : curry.bind(null, fn, ...args);&#125; js模拟new操作符的实现new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。new 关键字会进行如下的操作： 创建一个空的简单JavaScript对象（即{}）； 链接该对象（即设置该对象的构造函数）到另一个对象 ； 将步骤1新创建的对象作为this的上下文 ； 如果该函数没有返回对象，则返回this。接下来我们看实现：function Dog(name, color, age) &#123; this.name = name; this.color = color; this.age = age;&#125;Dog.prototype=&#123; getName: function() &#123; return this.name &#125;&#125;var dog = new Dog(&apos;大黄&apos;, &apos;yellow&apos;, 3) 上面的代码相信不用解释，大家都懂。我们来看最后一行带new关键字的代码，按照上述的1,2,3,4步来解析new背后的操作。 第一步：创建一个简单空对象var obj = &#123;&#125; 第二步：链接该对象到另一个对象（原型链）// 设置原型链obj.__proto__ = Dog.prototype 第三步：将步骤1新创建的对象作为 this 的上下文// this指向obj对象Dog.apply(obj, [&apos;大黄&apos;, &apos;yellow&apos;, 3]) 第四步：如果该函数没有返回对象，则返回this// 因为 Dog() 没有返回值，所以返回objvar dog = objdog.getName() // &apos;大黄&apos; 需要注意的是如果 Dog() 有 return 则返回 return的值var rtnObj = &#123;&#125;function Dog(name, color, age) &#123; // ... //返回一个对象 return rtnObj&#125;var dog = new Dog(&apos;大黄&apos;, &apos;yellow&apos;, 3)console.log(dog === rtnObj) // true 接下来我们将以上步骤封装成一个对象实例化方法，即模拟new的操作：function objectFactory()&#123; var obj = &#123;&#125;; //取得该方法的第一个参数(并删除第一个参数)，该参数是构造函数 var Constructor = [].shift.apply(arguments); //将新对象的内部属性__proto__指向构造函数的原型，这样新对象就可以访问原型中的属性和方法 obj.__proto__ = Constructor.prototype; //取得构造函数的返回值 var ret = Constructor.apply(obj, arguments); //如果返回值是一个对象就返回该对象，否则返回构造函数的一个实例对象 return typeof ret === &quot;object&quot; ? ret : obj;&#125; 什么是回调函数？回调函数有什么缺点回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码。在JavaScript中函数也是对象的一种，同样对象可以作为参数传递给函数，因此函数也可以作为参数传递给另外一个函数，这个作为参数的函数就是回调函数。 Promise是什么，可以手写实现一下吗？Promise，翻译过来是承诺，承诺它过一段时间会给你一个结果。从编程讲Promise 是异步编程的一种解决方案。下面是Promise在MDN的相关说明：Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。一个 Promise有以下几种状态: pending: 初始状态，既不是成功，也不是失败状态。 fulfilled: 意味着操作成功完成。 rejected: 意味着操作失败。这个承诺一旦从等待状态变成为其他状态就永远不能更改状态了，也就是说一旦状态变为 fulfilled/rejected 后，就不能再次改变。可能光看概念大家不理解Promise，我们举个简单的栗子；假如我有个女朋友，下周一是她生日，我答应她生日给她一个惊喜，那么从现在开始这个承诺就进入等待状态，等待下周一的到来，然后状态改变。如果下周一我如约给了女朋友惊喜，那么这个承诺的状态就会由pending切换为fulfilled，表示承诺成功兑现，一旦是这个结果了，就不会再有其他结果，即状态不会在发生改变；反之如果当天我因为工作太忙加班，把这事给忘了，说好的惊喜没有兑现，状态就会由pending切换为rejected，时间不可倒流，所以状态也不能再发生变化。上一条我们说过Promise可以解决回调地狱的问题，没错，pending 状态的 Promise 对象会触发 fulfilled/rejected 状态，一旦状态改变，Promise 对象的 then 方法就会被调用；否则就会触发 catch。我们将上一条回调地狱的代码改写一下：new Promise((resolve，reject) =&gt; &#123; setTimeout(() =&gt; &#123; console.log(1) resolve() &#125;,1000) &#125;).then((res) =&gt; &#123; setTimeout(() =&gt; &#123; console.log(2) &#125;,2000)&#125;).then((res) =&gt; &#123; setTimeout(() =&gt; &#123; console.log(3) &#125;,3000)&#125;).catch((err) =&gt; &#123;console.log(err)&#125;) 其实Promise也是存在一些缺点的，比如无法取消 Promise，错误需要通过回调函数捕获。手写版本function myPromise(constructor)&#123; let self=this; self.status=&quot;pending&quot; //定义状态改变前的初始状态 self.value=undefined;//定义状态为resolved的时候的状态 self.reason=undefined;//定义状态为rejected的时候的状态 function resolve(value)&#123; //两个===&quot;pending&quot;，保证了状态的改变是不可逆的 if(self.status===&quot;pending&quot;)&#123; self.value=value; self.status=&quot;resolved&quot;; &#125; &#125; function reject(reason)&#123; //两个===&quot;pending&quot;，保证了状态的改变是不可逆的 if(self.status===&quot;pending&quot;)&#123; self.reason=reason; self.status=&quot;rejected&quot;; &#125; &#125; //捕获构造异常 try&#123; constructor(resolve,reject); &#125;catch(e)&#123; reject(e); &#125;&#125;// 定义链式调用的then方法myPromise.prototype.then=function(onFullfilled,onRejected)&#123; let self=this; switch(self.status)&#123; case &quot;resolved&quot;: onFullfilled(self.value); break; case &quot;rejected&quot;: onRejected(self.reason); break; default: &#125;&#125; Iterator是什么，有什么作用？Iterator是理解第61条的先决知识Iterator（迭代器）是一种接口，也可以说是一种规范。为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。const obj = &#123; [Symbol.iterator]:function()&#123;&#125;&#125; [Symbol.iterator] 属性名是固定的写法，只要拥有了该属性的对象，就能够用迭代器的方式进行遍历。迭代器的遍历方法是首先获得一个迭代器的指针，初始时该指针指向第一条数据之前，接着通过调用 next 方法，改变指针的指向，让其指向下一条数据每一次的 next 都会返回一个对象，该对象有两个属性 value 代表想要获取的数据 done 布尔值，false表示当前指针指向的数据有值，true表示遍历已经结束Iterator 的作用有三个： 为各种数据结构，提供一个统一的、简便的访问接口； 使得数据结构的成员能够按某种次序排列； ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of消费。遍历过程： 创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。 第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。 第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。 不断调用指针对象的next方法，直到它指向数据结构的结束位置。每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。let arr = [&#123;num:1&#125;,2,3]let it = arr[Symbol.iterator]() // 获取数组中的迭代器console.log(it.next()) // &#123; value: Object &#123; num: 1 &#125;, done: false &#125;console.log(it.next()) // &#123; value: 2, done: false &#125;console.log(it.next()) // &#123; value: 3, done: false &#125;console.log(it.next()) // &#123; value: undefined, done: true &#125; Generator函数是什么，有什么作用？什么是 async/await及其如何工作,有什么优缺点？instanceof的原理是什么，如何实现js的节流与防抖什么是设计模式？9种前端常见的设计模式","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"文章","slug":"文章","permalink":"https://highzq.github.io/tags/文章/"}]},{"title":"BFC理解原理","slug":"BFC理解原理","date":"2020-07-13T06:26:43.000Z","updated":"2020-07-13T06:49:52.586Z","comments":true,"path":"2020/07/13/BFC理解原理/","link":"","permalink":"https://highzq.github.io/2020/07/13/BFC理解原理/","excerpt":"","text":"一、常见定位方案在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案: 普通流 (normal flow) 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。 浮动 (float) 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。 绝对定位 (absolute positioning) 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。 二、BFC 概念 Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。 那么 BFC 是什么呢？ BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。 具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。 通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。 三、触发 BFC只要元素满足下面任一条件即可触发 BFC 特性： body 根元素 浮动元素：float 除 none 以外的值 绝对定位元素：position (absolute、fixed) display 为 inline-block、table-cells、flex overflow 除了 visible 以外的值 (hidden、auto、scroll)","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://highzq.github.io/tags/HTML/"}]},{"title":"react Context(上下文方法使用)","slug":"react-Context-上下文方法使用","date":"2019-03-29T06:41:51.000Z","updated":"2019-10-23T10:30:36.031Z","comments":true,"path":"2019/03/29/react-Context-上下文方法使用/","link":"","permalink":"https://highzq.github.io/2019/03/29/react-Context-上下文方法使用/","excerpt":"","text":"使用React.createContext创建上下文，父组件使用 LocaleContext.Provider 创建组件，包裹的子组件使用 LocaleContext.Consumer 创建组件。当父组件的value值改变时就会重新渲染子组件 //定义const defaultValue = &apos;aaa&apos;;const LocaleContext = React.createContext(defaultValue);//父组件class LocaleProvider extends React.Component&#123; state = &#123; locale: defaultValue &#125; render()&#123; return ( &lt;LocaleContext.Provider value=&#123;this.state.locale&#125;&gt; &lt;button onClick=&#123;()=&gt;this.setState(&#123;locale: &apos;bbb&apos;)&#125;)&#125; &gt; 切换 &lt;/button&gt; &#123;this.props.children] &lt;/LocaleContext.Provider&gt; ) &#125;&#125;//子组件class LocaledButtons extends React.Componet&#123; render()&#123; return ( &lt;LocaleContext.Consumer&gt; &#123;locale =&gt; ( &lt;div&gt; &lt;span&gt;&#123;locale&#125;&lt;/span&gt; &lt;/div&gt; &#125; &lt;/LocaleContext.Consumer&gt; ) &#125;&#125;//实际使用export default () =&gt; ( &lt;LocaleProvider&gt; &lt;LocaledButtons /&gt; &lt;/LocaleProvider&gt;)","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"react","slug":"react","permalink":"https://highzq.github.io/tags/react/"}]},{"title":"让h5页面强制横屏","slug":"让h5页面强制横屏","date":"2018-07-25T07:51:43.000Z","updated":"2019-10-23T07:39:13.440Z","comments":true,"path":"2018/07/25/让h5页面强制横屏/","link":"","permalink":"https://highzq.github.io/2018/07/25/让h5页面强制横屏/","excerpt":"","text":"转载至：https://blog.csdn.net/qq_36457584/article/details/80967278 //注意设置*&#123;padding:0;margin:0;&#125; 不然有滚动条/** * H5强制横屏 * @param &#123;Object&#125; */ var wrapper = document.getElementById(&quot;root&quot;); var mark = window.orientation == 90 || window.orientation == -90; //初始角度//不同角度宽高需要互换var width = document.documentElement[mark ? &apos;clientHeight&apos; : &apos;clientWidth&apos;]; var height = document.documentElement[mark ? &apos;clientWidth&apos; : &apos;clientHeight&apos;]; var detectOrient = function() &#123; var style = &quot;&quot;; if (window.orientation == 90 || window.orientation == -90) &#123; //横屏 style += &quot;width:100%;&quot;; style += &quot;height:100%;&quot;; style += &quot;-webkit-transform: rotate(0); transform: rotate(0);&quot;; style += &quot;-webkit-transform-origin: 0 0;&quot;; style += &quot;transform-origin: 0 0;&quot;; &#125; else if(window.orientation == 180 || window.orientation == 0)&#123; //竖屏 style += &quot;width:&quot; + height + &quot;px;&quot;;// 注意旋转后的宽高切换 style += &quot;height:&quot;+ width + &quot;px;&quot;; style += &quot;-webkit-transform: rotate(90deg); transform: rotate(90deg);&quot;; // 注意旋转中点的处理 style += &quot;-webkit-transform-origin: &quot; + width / 2 + &quot;px &quot; + width / 2 + &quot;px;&quot;; style += &quot;transform-origin: &quot; + width / 2 + &quot;px &quot; + width / 2 + &quot;px;&quot;; &#125; style += &quot;visibility: initial;&quot;; wrapper.style.cssText = style; $(&quot;#progress&quot;).addClass(&quot;animate-progress&quot;);&#125; window.addEventListener(&quot;load&quot;, detectOrient, false);window.addEventListener(&quot;onorientationchange&quot; in window ? &quot;orientationchange&quot; : &quot;resize&quot;, detectOrient, false);detectOrient();","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"https://highzq.github.io/tags/javaScript/"},{"name":"技巧","slug":"技巧","permalink":"https://highzq.github.io/tags/技巧/"}]},{"title":"forEach兼容写法","slug":"forEach兼容写法","date":"2018-07-25T07:51:43.000Z","updated":"2019-10-21T06:40:59.114Z","comments":true,"path":"2018/07/25/forEach兼容写法/","link":"","permalink":"https://highzq.github.io/2018/07/25/forEach兼容写法/","excerpt":"","text":"最近写代码写到循环的时候没有多想就直接用了forEach，最后测试在IE的环境下测出了不兼容，为了不改动代码就打算定义一个 Array.prototype.forEach。 最后在网上找到这段(兼容IE8) if ( !Array.prototype.forEach ) &#123; Array.prototype.forEach = function forEach( callback, thisArg ) &#123; var T, k; if ( this == null ) &#123; throw new TypeError( &quot;this is null or not defined&quot; ); &#125; var O = Object(this); var len = O.length &gt;&gt;&gt; 0; if ( typeof callback !== &quot;function&quot; ) &#123; throw new TypeError( callback + &quot; is not a function&quot; ); &#125; if ( arguments.length &gt; 1 ) &#123; T = thisArg; &#125; k = 0; while( k &lt; len ) &#123; var kValue; if ( k in O ) &#123; kValue = O[ k ]; callback.call( T, kValue, k, O ); &#125; k++; &#125; &#125;;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"https://highzq.github.io/tags/javaScript/"}]},{"title":"使用hexo搭建博客时遇到的问题","slug":"使用hexo搭建博客时遇到的问题","date":"2018-07-13T09:45:51.000Z","updated":"2019-10-23T08:28:52.030Z","comments":true,"path":"2018/07/13/使用hexo搭建博客时遇到的问题/","link":"","permalink":"https://highzq.github.io/2018/07/13/使用hexo搭建博客时遇到的问题/","excerpt":"","text":"花了一下午时间终于把这个博客弄好了，大概就是坑在hexo的教程版本不一样导致，最后卡在执行 hexo d 命令时提示没有权限，在网上找到了解决方法，.deploy_git 文件删除在执行就OK了。","categories":[{"name":"记录","slug":"记录","permalink":"https://highzq.github.io/categories/记录/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://highzq.github.io/tags/心得/"},{"name":"文章","slug":"文章","permalink":"https://highzq.github.io/tags/文章/"}]}]}