{"meta":{"title":"我滴小博客","subtitle":"随便写写","description":null,"author":"Gao","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"react Context(上下文方法使用)","slug":"react-Context-上下文方法使用","date":"2019-03-29T06:41:51.000Z","updated":"2019-03-29T06:42:26.354Z","comments":true,"path":"2019/03/29/react-Context-上下文方法使用/","link":"","permalink":"http://yoursite.com/2019/03/29/react-Context-上下文方法使用/","excerpt":"","text":"使用React.createContext创建上下文，父组件使用 LocaleContext.Provider 创建组件，包裹的子组件使用 LocaleContext.Consumer 创建组件。当父组件的value值改变时就会重新渲染子组件 123456789101112131415161718192021222324252627282930313233343536373839404142//定义const defaultValue = &apos;aaa&apos;;const LocaleContext = React.createContext(defaultValue);//父组件class LocaleProvider extends React.Component&#123; state = &#123; locale: defaultValue &#125; render()&#123; return ( &lt;LocaleContext.Provider value=&#123;this.state.locale&#125;&gt; &lt;button onClick=&#123;()=&gt;this.setState(&#123;locale: &apos;bbb&apos;)&#125;)&#125; &gt; 切换 &lt;/button&gt; &#123;this.props.children] &lt;/LocaleContext.Provider&gt; ) &#125;&#125;//子组件class LocaledButtons extends React.Componet&#123; render()&#123; return ( &lt;LocaleContext.Consumer&gt; &#123;locale =&gt; ( &lt;div&gt; &lt;span&gt;&#123;locale&#125;&lt;/span&gt; &lt;/div&gt; &#125; &lt;/LocaleContext.Consumer&gt; ) &#125;&#125;//实际使用export default () =&gt; ( &lt;LocaleProvider&gt; &lt;LocaledButtons /&gt; &lt;/LocaleProvider&gt;)","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-10-15T09:18:02.965Z","updated":"2017-10-28T00:39:58.000Z","comments":true,"path":"2018/10/15/hello-world/","link":"","permalink":"http://yoursite.com/2018/10/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"forEach兼容写法","slug":"forEach兼容写法","date":"2018-07-25T07:51:43.000Z","updated":"2018-07-25T08:12:22.281Z","comments":true,"path":"2018/07/25/forEach兼容写法/","link":"","permalink":"http://yoursite.com/2018/07/25/forEach兼容写法/","excerpt":"","text":"最近写代码写到循环的时候没有多想就直接用了forEach，最后测试在IE的环境下测出了不兼容，为了不改动代码就打算定义一个 Array.prototype.forEach。 最后在网上找到这段(兼容IE8) 123456789101112131415161718192021222324252627if ( !Array.prototype.forEach ) &#123; Array.prototype.forEach = function forEach( callback, thisArg ) &#123; var T, k; if ( this == null ) &#123; throw new TypeError( &quot;this is null or not defined&quot; ); &#125; var O = Object(this); var len = O.length &gt;&gt;&gt; 0; if ( typeof callback !== &quot;function&quot; ) &#123; throw new TypeError( callback + &quot; is not a function&quot; ); &#125; if ( arguments.length &gt; 1 ) &#123; T = thisArg; &#125; k = 0; while( k &lt; len ) &#123; var kValue; if ( k in O ) &#123; kValue = O[ k ]; callback.call( T, kValue, k, O ); &#125; k++; &#125; &#125;;&#125;","categories":[],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"http://yoursite.com/tags/javaScript/"}]},{"title":"第一篇","slug":"第一篇","date":"2018-07-13T09:45:51.000Z","updated":"2018-07-25T08:45:45.043Z","comments":true,"path":"2018/07/13/第一篇/","link":"","permalink":"http://yoursite.com/2018/07/13/第一篇/","excerpt":"","text":"最后卡在执行 hexo d 命令时提示没有权限，在网上找到了解决方法，.deploy_git 文件删除在执行就OK了。 TFC第三方插件使用1. 下拉选择框美化插件 (selectpick.js)中文文档地址: http://www.jq22.com/jquery-info1159 显示效果如下图： 如何使用 1234567891011121314151617181920212223242526272829303132333435363738394041// 1. 引入 ~/Content/css/global/selectpick.css 和 ~/Scripts/ThirdParty/selectpick.js // 2. 在页面调用$(&quot;#&quot; + selectId).selectpick(&#123; // selectId 是select控件的id container: &apos;.&apos; + container, // container为select控件父级元素的class名 onSelect: onSelectFn // 选择选项以后的回调函数&#125;);用法：//初始化配置 var DropdownConfig = &#123; content: [&#123;...&#125;], container: &apos;#id&apos;, mappingKeys: &#123; id: &apos;Id&apos;, name: &apos;Name&apos; &#125; &#125;; //初始化实例var dropdownObj = new Dropdown(gradeDropdownData);//选中值 dropdownObj.pick(obj);//禁用选择框dropdownObj.disable();//禁用选择框,但不改变内容dropdownObj.disable2();//启用选择框dropdownObj.enable(isRest);//重新渲染dropdownObj.reRender(data:Array); 还有其他方法需要查看源代码 目前正使用该插件的模块有: 机构管理平台 - 动态贴牌 - 添加/编辑贴牌 - 版权说明 机构 - 测评中心很多页面（包括新增自建测评页面， 测评综合分析页的学校，班级选择框） 试卷管理平台 - 添加试卷页面 1.1 下拉选择带搜索框插件 (comboSelect.js)中文文档地址：http://www.jq22.com/jquery-info8567 显示效果如下图： 1234567891011121314151617181920212223242526272829303132333435363738394041424344 //引入 js css &quot;~/Scripts/ThirdParty/jquery.combo.select.js&quot;, &quot;~/Content/css/compontent/combo.select.css&quot;, //初始化 $(dom).comboSelect(&#123; comboArrowClass: &apos;no&apos;, placeholder: &apos;请选择&apos;, &#125;); //选择框的option 需要使用html();方式填入 //初始化配置表 属性/方法 类型 默认值 说明 comboClass 字符串 combo-select 外部控制器的 class comboArrowClass 字符串 combo-select-arrow 箭头的 class comboDropDownClass 字符串 combo-drop-down 下拉展开后箭头的 class inputClass 字符串 combobox-input text-input 输入框的 class disabledClass 字符串 option-disabled 禁用选项的 class hoverClass 字符串 option-hover 鼠标经过的 class selectedClass 字符串 option-selected 被选中项的 class markerClass 字符串 combo-marker 匹配搜索的 class maxHeight 整数 200 最大高度 themeClass 字符串 空 使用外部主题 extendStyle 布尔值 true true``` 目前有在使用表单验证插件的地方有：1. 管理平台 - 机构管理 - 打印服务模块2. 试卷管理平台 - 机构试卷管理 - 添加试卷模块## 2. 滚动条美化插件 （jquery.nicescroll.js）中文文档地址: [http://www.jq22.com/jquery-info5869]( http://www.jq22.com/jquery-info5869)显示效果如下图：![滚动条美化插件](./img/nicescroll.png)如何使用 // 1. 引入 ~/Scripts/ThirdParty/jquery.nicescroll.js $(dom).niceScroll(options); // dom 为需要生成滚动条的元素// options 是niceScroll的一些配置，具体可以看文档 12345678910111213141516## 3. 页面弹框组件 （show_dialog.js）显示效果如下图：![页面弹框组件](./img/dialog.png)jquery.simplemodal.js 文档地址：1. [官方文档地址](http://www.ericmmartin.com/projects/simplemodal/)2. [中文使用教程](https://www.cnblogs.com/resolvent/p/5822513.html)**说明:** 此组件是对jquery.simplemodal.js这个弹框插件的二次封装，没有文档。需要结合simplemodal的文档和show_dialog.js的源码一起看。如何使用 // a. 由于依赖~/Scripts/ThirdParty/jquery.simplemodal.js这个组件，所以需要引入此文件。// b. 引入~/Scripts/plugin/show_dialog.js// c. 在页面调用dialog.show, 如下:dialog.show({ title: ‘标题’, dialogClass: ‘弹框样式类名’, content: 弹框内容区域显示, 即除了标题和关闭按钮以外的其它自定义内容, overlayClose: true, // 点击遮罩关闭 onShow: // 显示之后的回调函数}); 1234567891011121314## 4.日期选择组件 （daterangepicker）[官方文档](http://www.daterangepicker.com/)[中文使用文档](https://www.cnblogs.com/leijing0607/p/7698414.html)显示效果如下图:![日期选择组件](./img/daterangepicker.png)如何使用： // 引入以下样式表和js文件// /Scripts/ThirdParty/DateStatistics/daterangepicker-bs3.css// /Content/css/bootstrap.min.css// /Scripts/ThirdParty/DateStatistics/moment.js // 日期格式化// /Scripts/ThirdParty/DateStatistics/daterangepicker.js// 页面上调用 $(输入框ID).daterangepicker（日期配置选项）12345678910111213141516171819## 5. 分页插件（自定义）显示效果如下图:![日期选择组件](./img/page.png)这个组件的使用比较复杂，主要的是需要引入 **&quot;~/Scripts/plugin/common_pagination.js&quot;**这个文件，再定义全局的查询参数变量。具体的详细的使用可以参考贴牌管理-详情页列表信息里的使用主要注意以下几个文件:![日期选择组件](./img/page-code.png)## 6. 上传文件组件[jquery.uploadfile.js 中文文档](https://blog.csdn.net/zl594389970/article/details/51417934)使用： /Scripts/uploadFile/jquery.uploadfile.js/Scripts/plugin/common_upload_file.js/Content/css/organizationOEM/common/upload_file.css 这样以后就可以在文件中使用 /** sceneEnum options 上传文件了一些配置，比如上传文件大小限制， 类型限制, 上传地址等等，具体的配置可以参考jquery.uploadfile的文档 上传成功的回调接收ReturnEntity,files两个参数*/$(dom).commonUploadFile(sceneEnum, options, callback) // 上传文件$(dom).commonUploadImage(sceneEnum, options, callback) // 上传图片 12345## 6.1 文件上组件[百度文件上传组件文档](http://fex-team.github.io/webuploader/ &quot;WebUploader是由Baidu WebFE(FEX)团队开发的一个简单的以HTML5为主，FLASH为辅的现代文件上传组件&quot;)**demo文件** yunjiaoping\\trunk\\YunXuePing\\YunXuePing.Web\\Scripts\\ThirdParty\\webuploader\\demo.html //1. 引入样式 &quot;~/Scripts/ThirdParty/webuploader/webuploader.css&quot; //2. 压缩文件在html内引入 &lt;script src=&quot;~/Scripts/ThirdParty/webuploader/webuploader.min.js&quot;&gt;&lt;/script&gt; //初始化上传文件 var uploader = new WebUploader.Uploader({ // swf文件路径 swf: &quot;../../ThirdParty/webuploader/Uploader.swf&quot;, // 文件接收服务端。 server: &quot;/PrintManagement/ReportSubmit&quot;, // 选择文件的按钮。可选。 // 内部根据当前运行是创建，可能是input元素，也可能是flash. pick: &quot;#pick_file&quot;, accept: [{ title: &apos;压缩包&apos;, extensions: &apos;zip&apos;, mimeTypes: &apos;zip&apos; }], timeout: 30 * 60 * 1000, fileSizeLimit: 200 * 1024 * 1024, fileNumLimit: 1, formData: params, }); // 当有文件添加进来的时候 uploader.on(&quot;fileQueued&quot;, function (file) { }); // 文件上传过程中创建进度条实时显示。(进度条假的) uploader.on(&quot;uploadProgress&quot;, function (file, percentage) { }); //上传成功 uploader.on(&quot;uploadSuccess&quot;, function (file, response) { }); //上传失败 uploader.on(&apos;uploadError&apos;, function (file) { }); //重试上传 uploader.retry(file); 12345678910111213141516## 7. 图表组件（echarts）提分策用到的echarts版为2[echarts中文文档](http://echarts.baidu.com/echarts2/doc/doc.html)## 8. 轮播组件[flexslider轮播插件中文文档](https://blog.csdn.net/cddcj/article/details/52173388) 1、引入文件 2、HTML 3、JavaScript &lt;script type=”text/javascript”src=”js/jquery.flexslider-min.js”&gt; $(function(){ $(“.flexslider”).flexslider({ slideshowSpeed:4000,//展示时间间隔ms animationSpeed:400,//滚动时间ms touch:true//是否支持触屏滑动 }); }); ` 只在提分策首页使用到了轮播图组件 10. 表单提交验证插件 （jquery.validate.js）中文文档 官方文档 具体使用请自行查看文档 目前有在使用表单验证插件的地方有： 总机构管理 - 添加/编辑子机构 考试管理 - 添加试卷 - 填写试卷信息 - 设置题目","categories":[],"tags":[{"name":"心得","slug":"心得","permalink":"http://yoursite.com/tags/心得/"}]}]}