{"meta":{"title":"我滴小博客","subtitle":"随便写写","description":"","author":"Gao","url":"https://highzq.github.io"},"pages":[{"title":"文章分类","date":"2019-03-29T09:17:36.000Z","updated":"2019-03-29T10:30:28.103Z","comments":true,"path":"categories/index.html","permalink":"https://highzq.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-03-29T09:18:23.000Z","updated":"2019-03-29T10:30:24.064Z","comments":true,"path":"tags/index.html","permalink":"https://highzq.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"react Context(上下文方法使用)","slug":"react-Context-上下文方法使用","date":"2019-03-29T06:41:51.000Z","updated":"2019-10-21T06:41:01.865Z","comments":true,"path":"2019/03/29/react-Context-上下文方法使用/","link":"","permalink":"https://highzq.github.io/2019/03/29/react-Context-上下文方法使用/","excerpt":"","text":"使用React.createContext创建上下文，父组件使用 LocaleContext.Provider 创建组件，包裹的子组件使用 LocaleContext.Consumer 创建组件。当父组件的value值改变时就会重新渲染子组件 //定义const defaultValue = &apos;aaa&apos;;const LocaleContext = React.createContext(defaultValue);//父组件class LocaleProvider extends React.Component&#123; state = &#123; locale: defaultValue &#125; render()&#123; return ( &lt;LocaleContext.Provider value=&#123;this.state.locale&#125;&gt; &lt;button onClick=&#123;()=&gt;this.setState(&#123;locale: &apos;bbb&apos;)&#125;)&#125; &gt; 切换 &lt;/button&gt; &#123;this.props.children] &lt;/LocaleContext.Provider&gt; ) &#125;&#125;//子组件class LocaledButtons extends React.Componet&#123; render()&#123; return ( &lt;LocaleContext.Consumer&gt; &#123;locale =&gt; ( &lt;div&gt; &lt;span&gt;&#123;locale&#125;&lt;/span&gt; &lt;/div&gt; &#125; &lt;/LocaleContext.Consumer&gt; ) &#125;&#125;//实际使用export default () =&gt; ( &lt;LocaleProvider&gt; &lt;LocaledButtons /&gt; &lt;/LocaleProvider&gt;)","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"react","slug":"react","permalink":"https://highzq.github.io/tags/react/"}]},{"title":"让h5页面强制横屏","slug":"让h5页面强制横屏","date":"2018-07-25T07:51:43.000Z","updated":"2019-10-23T07:39:13.440Z","comments":true,"path":"2018/07/25/让h5页面强制横屏/","link":"","permalink":"https://highzq.github.io/2018/07/25/让h5页面强制横屏/","excerpt":"","text":"转载至：https://blog.csdn.net/qq_36457584/article/details/80967278 //注意设置*&#123;padding:0;margin:0;&#125; 不然有滚动条/** * H5强制横屏 * @param &#123;Object&#125; */ var wrapper = document.getElementById(&quot;root&quot;); var mark = window.orientation == 90 || window.orientation == -90; //初始角度//不同角度宽高需要互换var width = document.documentElement[mark ? &apos;clientHeight&apos; : &apos;clientWidth&apos;]; var height = document.documentElement[mark ? &apos;clientWidth&apos; : &apos;clientHeight&apos;]; var detectOrient = function() &#123; var style = &quot;&quot;; if (window.orientation == 90 || window.orientation == -90) &#123; //横屏 style += &quot;width:100%;&quot;; style += &quot;height:100%;&quot;; style += &quot;-webkit-transform: rotate(0); transform: rotate(0);&quot;; style += &quot;-webkit-transform-origin: 0 0;&quot;; style += &quot;transform-origin: 0 0;&quot;; &#125; else if(window.orientation == 180 || window.orientation == 0)&#123; //竖屏 style += &quot;width:&quot; + height + &quot;px;&quot;;// 注意旋转后的宽高切换 style += &quot;height:&quot;+ width + &quot;px;&quot;; style += &quot;-webkit-transform: rotate(90deg); transform: rotate(90deg);&quot;; // 注意旋转中点的处理 style += &quot;-webkit-transform-origin: &quot; + width / 2 + &quot;px &quot; + width / 2 + &quot;px;&quot;; style += &quot;transform-origin: &quot; + width / 2 + &quot;px &quot; + width / 2 + &quot;px;&quot;; &#125; style += &quot;visibility: initial;&quot;; wrapper.style.cssText = style; $(&quot;#progress&quot;).addClass(&quot;animate-progress&quot;);&#125; window.addEventListener(&quot;load&quot;, detectOrient, false);window.addEventListener(&quot;onorientationchange&quot; in window ? &quot;orientationchange&quot; : &quot;resize&quot;, detectOrient, false);detectOrient();","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"https://highzq.github.io/tags/javaScript/"},{"name":"技巧","slug":"技巧","permalink":"https://highzq.github.io/tags/技巧/"}]},{"title":"forEach兼容写法","slug":"forEach兼容写法","date":"2018-07-25T07:51:43.000Z","updated":"2019-10-21T06:40:59.114Z","comments":true,"path":"2018/07/25/forEach兼容写法/","link":"","permalink":"https://highzq.github.io/2018/07/25/forEach兼容写法/","excerpt":"","text":"最近写代码写到循环的时候没有多想就直接用了forEach，最后测试在IE的环境下测出了不兼容，为了不改动代码就打算定义一个 Array.prototype.forEach。 最后在网上找到这段(兼容IE8) if ( !Array.prototype.forEach ) &#123; Array.prototype.forEach = function forEach( callback, thisArg ) &#123; var T, k; if ( this == null ) &#123; throw new TypeError( &quot;this is null or not defined&quot; ); &#125; var O = Object(this); var len = O.length &gt;&gt;&gt; 0; if ( typeof callback !== &quot;function&quot; ) &#123; throw new TypeError( callback + &quot; is not a function&quot; ); &#125; if ( arguments.length &gt; 1 ) &#123; T = thisArg; &#125; k = 0; while( k &lt; len ) &#123; var kValue; if ( k in O ) &#123; kValue = O[ k ]; callback.call( T, kValue, k, O ); &#125; k++; &#125; &#125;;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"https://highzq.github.io/tags/javaScript/"}]},{"title":"使用hexo搭建博客时遇到的问题","slug":"第一篇","date":"2018-07-13T09:45:51.000Z","updated":"2019-10-21T06:40:48.375Z","comments":true,"path":"2018/07/13/第一篇/","link":"","permalink":"https://highzq.github.io/2018/07/13/第一篇/","excerpt":"","text":"花了一下午时间终于把这个博客弄好了，大概就是坑在hexo的教程版本不一样导致，最后卡在执行 hexo d 命令时提示没有权限，在网上找到了解决方法，.deploy_git 文件删除在执行就OK了。","categories":[{"name":"记录","slug":"记录","permalink":"https://highzq.github.io/categories/记录/"}],"tags":[{"name":"心得","slug":"心得","permalink":"https://highzq.github.io/tags/心得/"},{"name":"文章","slug":"文章","permalink":"https://highzq.github.io/tags/文章/"}]}]}