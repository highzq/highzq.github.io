{"meta":{"title":"我滴小博客","subtitle":"随便写写","description":"","author":"Gao","url":"https://highzq.github.io"},"pages":[{"title":"文章分类","date":"2019-03-29T09:17:36.000Z","updated":"2019-03-29T10:30:28.103Z","comments":true,"path":"categories/index.html","permalink":"https://highzq.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-03-29T09:18:23.000Z","updated":"2019-03-29T10:30:24.064Z","comments":true,"path":"tags/index.html","permalink":"https://highzq.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"问题整理","slug":"问题整理","date":"2020-07-13T08:00:14.000Z","updated":"2020-07-13T09:54:38.822Z","comments":true,"path":"2020/07/13/问题整理/","link":"","permalink":"https://highzq.github.io/2020/07/13/问题整理/","excerpt":"","text":"介绍一下js的数据类型有哪些,值是如何存储的一共有8种数据类型，7种基本数据类型String Number Boolean Null Undefined Symbol（es6 新增类型，表示第一无二的值） BigInt（es10 新增数据类型，目的是比Number数据类型支持的范围更大的整数值） &amp;&amp; 、 ||和!! 运算符分别能做什么JS的数据类型的转换JS中数据类型的判断（ typeof，instanceof，constructor，Object.prototype.toString.call()介绍 JS 有哪些内置对象？undefined 与 undeclared 的区别？null 和 undefined 的区别？{}和[]的valueOf和toString的结果是什么？Javascript 的作用域和作用域链？javascript 创建对象的几种方式？JavaScript 继承的几种实现方式？寄生式组合继承的实现？谈谈你对this、call、apply和bind的理解JavaScript 原型，原型链？ 有什么特点？js 获取原型的方法？什么是闭包，为什么要用它？什么是 DOM 和 BOM？三种事件模型是什么？事件委托是什么？什么是事件传播?什么是事件捕获？什么是事件冒泡？DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？js数组和对象有哪些原生方法,列举一下常用的正则表达式Ajax 是什么? 如何创建一个 Ajax？js 延迟加载的方式有哪些？谈谈你对模块化开发的理解？js 的几种模块规范？AMD和CMD 规范的区别？ES6 模块与 CommonJS 模块、AMD、CMD 的差异。requireJS的核心原理是什么？ 33. 谈谈JS的运行机制arguments 的对象是什么？为什么在调用这个函数时，代码中的b会变成一个全局变量?简单介绍一下V8引擎的垃圾回收机制哪些操作会造成内存泄漏？ 38. ECMAScript 是什么？ECMAScript 2015（ES6）有哪些新特性？var,let和const的区别是什么？什么是箭头函数？什么是类？什么是模板字符串？什么是对象解构？什么是Set对象，它是如何工作的？什么是Proxy？写一个通用的事件侦听器函数，为什么要用它？什么是函数式编程? JavaScript的哪些特性使其成为函数式语言的候选语言？什么是高阶函数？为什么函数被称为一等公民？手动实现Array.prototype.map 方法手动实现Array.prototype.filter方法手动实现Array.prototype.reduce方法js的深浅拷贝手写call、apply及bind函数函数柯里化的实现js模拟new操作符的实现什么是回调函数？回调函数有什么缺点Promise是什么，可以手写实现一下吗？Iterator是什么，有什么作用？Generator函数是什么，有什么作用？什么是 async/await及其如何工作,有什么优缺点？instanceof的原理是什么，如何实现js的节流与防抖什么是设计模式？9种前端常见的设计模式","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"文章","slug":"文章","permalink":"https://highzq.github.io/tags/文章/"}]},{"title":"BFC理解原理","slug":"BFC理解原理","date":"2020-07-13T06:26:43.000Z","updated":"2020-07-13T06:49:52.586Z","comments":true,"path":"2020/07/13/BFC理解原理/","link":"","permalink":"https://highzq.github.io/2020/07/13/BFC理解原理/","excerpt":"","text":"一、常见定位方案在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案: 普通流 (normal flow) 在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。 浮动 (float) 在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。 绝对定位 (absolute positioning) 在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。 二、BFC 概念 Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。 那么 BFC 是什么呢？ BFC 即 Block Formatting Contexts (块级格式化上下文)，它属于上述定位方案的普通流。 具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。 通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。 三、触发 BFC只要元素满足下面任一条件即可触发 BFC 特性： body 根元素 浮动元素：float 除 none 以外的值 绝对定位元素：position (absolute、fixed) display 为 inline-block、table-cells、flex overflow 除了 visible 以外的值 (hidden、auto、scroll)","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://highzq.github.io/tags/HTML/"}]},{"title":"react Context(上下文方法使用)","slug":"react-Context-上下文方法使用","date":"2019-03-29T06:41:51.000Z","updated":"2019-10-23T10:30:36.031Z","comments":true,"path":"2019/03/29/react-Context-上下文方法使用/","link":"","permalink":"https://highzq.github.io/2019/03/29/react-Context-上下文方法使用/","excerpt":"","text":"使用React.createContext创建上下文，父组件使用 LocaleContext.Provider 创建组件，包裹的子组件使用 LocaleContext.Consumer 创建组件。当父组件的value值改变时就会重新渲染子组件 //定义const defaultValue = &apos;aaa&apos;;const LocaleContext = React.createContext(defaultValue);//父组件class LocaleProvider extends React.Component&#123; state = &#123; locale: defaultValue &#125; render()&#123; return ( &lt;LocaleContext.Provider value=&#123;this.state.locale&#125;&gt; &lt;button onClick=&#123;()=&gt;this.setState(&#123;locale: &apos;bbb&apos;)&#125;)&#125; &gt; 切换 &lt;/button&gt; &#123;this.props.children] &lt;/LocaleContext.Provider&gt; ) &#125;&#125;//子组件class LocaledButtons extends React.Componet&#123; render()&#123; return ( &lt;LocaleContext.Consumer&gt; &#123;locale =&gt; ( &lt;div&gt; &lt;span&gt;&#123;locale&#125;&lt;/span&gt; &lt;/div&gt; &#125; &lt;/LocaleContext.Consumer&gt; ) &#125;&#125;//实际使用export default () =&gt; ( &lt;LocaleProvider&gt; &lt;LocaledButtons /&gt; &lt;/LocaleProvider&gt;)","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"react","slug":"react","permalink":"https://highzq.github.io/tags/react/"}]},{"title":"forEach兼容写法","slug":"forEach兼容写法","date":"2018-07-25T07:51:43.000Z","updated":"2019-10-21T06:40:59.114Z","comments":true,"path":"2018/07/25/forEach兼容写法/","link":"","permalink":"https://highzq.github.io/2018/07/25/forEach兼容写法/","excerpt":"","text":"最近写代码写到循环的时候没有多想就直接用了forEach，最后测试在IE的环境下测出了不兼容，为了不改动代码就打算定义一个 Array.prototype.forEach。 最后在网上找到这段(兼容IE8) if ( !Array.prototype.forEach ) &#123; Array.prototype.forEach = function forEach( callback, thisArg ) &#123; var T, k; if ( this == null ) &#123; throw new TypeError( &quot;this is null or not defined&quot; ); &#125; var O = Object(this); var len = O.length &gt;&gt;&gt; 0; if ( typeof callback !== &quot;function&quot; ) &#123; throw new TypeError( callback + &quot; is not a function&quot; ); &#125; if ( arguments.length &gt; 1 ) &#123; T = thisArg; &#125; k = 0; while( k &lt; len ) &#123; var kValue; if ( k in O ) &#123; kValue = O[ k ]; callback.call( T, kValue, k, O ); &#125; k++; &#125; &#125;;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"https://highzq.github.io/tags/javaScript/"}]},{"title":"让h5页面强制横屏","slug":"让h5页面强制横屏","date":"2018-07-25T07:51:43.000Z","updated":"2019-10-23T07:39:13.440Z","comments":true,"path":"2018/07/25/让h5页面强制横屏/","link":"","permalink":"https://highzq.github.io/2018/07/25/让h5页面强制横屏/","excerpt":"","text":"转载至：https://blog.csdn.net/qq_36457584/article/details/80967278 //注意设置*&#123;padding:0;margin:0;&#125; 不然有滚动条/** * H5强制横屏 * @param &#123;Object&#125; */ var wrapper = document.getElementById(&quot;root&quot;); var mark = window.orientation == 90 || window.orientation == -90; //初始角度//不同角度宽高需要互换var width = document.documentElement[mark ? &apos;clientHeight&apos; : &apos;clientWidth&apos;]; var height = document.documentElement[mark ? &apos;clientWidth&apos; : &apos;clientHeight&apos;]; var detectOrient = function() &#123; var style = &quot;&quot;; if (window.orientation == 90 || window.orientation == -90) &#123; //横屏 style += &quot;width:100%;&quot;; style += &quot;height:100%;&quot;; style += &quot;-webkit-transform: rotate(0); transform: rotate(0);&quot;; style += &quot;-webkit-transform-origin: 0 0;&quot;; style += &quot;transform-origin: 0 0;&quot;; &#125; else if(window.orientation == 180 || window.orientation == 0)&#123; //竖屏 style += &quot;width:&quot; + height + &quot;px;&quot;;// 注意旋转后的宽高切换 style += &quot;height:&quot;+ width + &quot;px;&quot;; style += &quot;-webkit-transform: rotate(90deg); transform: rotate(90deg);&quot;; // 注意旋转中点的处理 style += &quot;-webkit-transform-origin: &quot; + width / 2 + &quot;px &quot; + width / 2 + &quot;px;&quot;; style += &quot;transform-origin: &quot; + width / 2 + &quot;px &quot; + width / 2 + &quot;px;&quot;; &#125; style += &quot;visibility: initial;&quot;; wrapper.style.cssText = style; $(&quot;#progress&quot;).addClass(&quot;animate-progress&quot;);&#125; window.addEventListener(&quot;load&quot;, detectOrient, false);window.addEventListener(&quot;onorientationchange&quot; in window ? &quot;orientationchange&quot; : &quot;resize&quot;, detectOrient, false);detectOrient();","categories":[{"name":"技术","slug":"技术","permalink":"https://highzq.github.io/categories/技术/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"https://highzq.github.io/tags/javaScript/"},{"name":"技巧","slug":"技巧","permalink":"https://highzq.github.io/tags/技巧/"}]},{"title":"使用hexo搭建博客时遇到的问题","slug":"使用hexo搭建博客时遇到的问题","date":"2018-07-13T09:45:51.000Z","updated":"2019-10-23T08:28:52.030Z","comments":true,"path":"2018/07/13/使用hexo搭建博客时遇到的问题/","link":"","permalink":"https://highzq.github.io/2018/07/13/使用hexo搭建博客时遇到的问题/","excerpt":"","text":"花了一下午时间终于把这个博客弄好了，大概就是坑在hexo的教程版本不一样导致，最后卡在执行 hexo d 命令时提示没有权限，在网上找到了解决方法，.deploy_git 文件删除在执行就OK了。","categories":[{"name":"记录","slug":"记录","permalink":"https://highzq.github.io/categories/记录/"}],"tags":[{"name":"文章","slug":"文章","permalink":"https://highzq.github.io/tags/文章/"},{"name":"心得","slug":"心得","permalink":"https://highzq.github.io/tags/心得/"}]}]}